import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio
import json
import os
from datetime import datetime, timedelta

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

DATA_FILE = "game_data.json"

# ------------------ Data Handling ------------------

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {
        "users": {},
        "rarities": {
            "common": {"chance": 60, "items": ["Wooden Sword", "Cloth Armor"], "sell_value": 5, "hp": 20, "damage": (1, 5)},
            "rare": {"chance": 30, "items": ["Steel Sword", "Iron Armor"], "sell_value": 20, "hp": 40, "damage": (5, 10)},
            "epic": {"chance": 9, "items": ["Magic Wand", "Dragon Armor"], "sell_value": 50, "hp": 60, "damage": (10, 20)},
            "legendary": {"chance": 1, "items": ["Excalibur", "Phoenix Armor"], "sell_value": 200, "hp": 100, "damage": (20, 40)}
        },
        "bundles": {}
    }

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

data = load_data()

def get_user(user_id):
    if str(user_id) not in data["users"]:
        data["users"][str(user_id)] = {"coins": 0, "inventory": [], "last_daily": "2000-01-01 00:00:00"}
    return data["users"][str(user_id)]

def is_admin(interaction: discord.Interaction):
    return interaction.user.guild_permissions.administrator

# ------------------ Bot Ready ------------------

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} commands.")
    except Exception as e:
        print(f"Sync error: {e}")

# ------------------ Currency Commands ------------------

@bot.tree.command(name="daily", description="Claim 10 coins every 15 hours.")
async def daily(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    last_claim = datetime.strptime(user["last_daily"], "%Y-%m-%d %H:%M:%S")
    if datetime.now() - last_claim < timedelta(hours=15):
        await interaction.response.send_message("⏳ You must wait before claiming daily coins again.", ephemeral=True)
        return
    user["coins"] += 10
    user["last_daily"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_data(data)
    await interaction.response.send_message("✅ You claimed 10 coins!")

@bot.tree.command(name="bank", description="Check your coin balance.")
async def bank(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    await interaction.response.send_message(f"💰 You have {user['coins']} coins.")

# ------------------ Shop Commands ------------------

@bot.tree.command(name="buy", description="Spend 10 coins to buy a random item.")
async def buy(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    if user["coins"] < 10:
        await interaction.response.send_message("❌ You don’t have enough coins.")
        return
    user["coins"] -= 10
    rarity = random.choices(list(data["rarities"].keys()), weights=[r["chance"] for r in data["rarities"].values()])[0]
    item = random.choice(data["rarities"][rarity]["items"])
    user["inventory"].append({"name": item, "rarity": rarity})
    save_data(data)
    await interaction.response.send_message(f"🎁 You got a **{rarity.capitalize()} {item}**!")

@bot.tree.command(name="inventory", description="Check your inventory.")
async def inventory(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    if not user["inventory"]:
        await interaction.response.send_message("🎒 Your inventory is empty.")
        return
    items_list = "\n".join([f"- {item['rarity'].capitalize()} {item['name']}" for item in user["inventory"]])
    await interaction.response.send_message(f"🎒 Your inventory:\n{items_list}")

@bot.tree.command(name="sell", description="Sell an item by name.")
@app_commands.describe(item_name="Name of the item to sell")
async def sell(interaction: discord.Interaction, item_name: str):
    user = get_user(interaction.user.id)
    for item in user["inventory"]:
        if item["name"].lower() == item_name.lower():
            rarity = item["rarity"]
            value = data["rarities"][rarity]["sell_value"]
            user["coins"] += value
            user["inventory"].remove(item)
            save_data(data)
            await interaction.response.send_message(f"✅ You sold {item['name']} for {value} coins.")
            return
    await interaction.response.send_message("❌ Item not found in inventory.")

@bot.tree.command(name="sell_all", description="Sell all items of a given rarity.")
@app_commands.describe(rarity="Rarity of items to sell")
async def sell_all(interaction: discord.Interaction, rarity: str):
    user = get_user(interaction.user.id)
    sold_items = [i for i in user["inventory"] if i["rarity"] == rarity]
    if not sold_items:
        await interaction.response.send_message("❌ No items of that rarity to sell.")
        return
    total_value = len(sold_items) * data["rarities"][rarity]["sell_value"]
    user["coins"] += total_value
    user["inventory"] = [i for i in user["inventory"] if i["rarity"] != rarity]
    save_data(data)
    await interaction.response.send_message(f"✅ Sold {len(sold_items)} {rarity} items for {total_value} coins.")

# ------------------ Trading System ------------------

@bot.tree.command(name="trade", description="Trade an item with another user.")
@app_commands.describe(member="User to trade with", your_item="Your item name", their_item="Item you want from them")
async def trade(interaction: discord.Interaction, member: discord.Member, your_item: str, their_item: str):
    user = get_user(interaction.user.id)
    target = get_user(member.id)

    # Verify both items exist
    your_item_obj = next((i for i in user["inventory"] if i["name"].lower() == your_item.lower()), None)
    target_item_obj = next((i for i in target["inventory"] if i["name"].lower() == their_item.lower()), None)

    if not your_item_obj:
        await interaction.response.send_message("❌ You don’t own that item.")
        return
    if not target_item_obj:
        await interaction.response.send_message(f"❌ {member.display_name} doesn’t own that item.")
        return

    # Ask target to accept trade
    view = discord.ui.View(timeout=60)

    async def accept_callback(interact: discord.Interaction):
        if interact.user != member:
            await interact.response.send_message("❌ You’re not part of this trade.", ephemeral=True)
            return
        user["inventory"].remove(your_item_obj)
        target["inventory"].remove(target_item_obj)
        user["inventory"].append(target_item_obj)
        target["inventory"].append(your_item_obj)
        save_data(data)
        await interact.response.edit_message(content=f"✅ Trade complete! {interaction.user.display_name} traded {your_item_obj['name']} for {member.display_name}'s {target_item_obj['name']}.", view=None)

    async def decline_callback(interact: discord.Interaction):
        if interact.user != member:
            await interact.response.send_message("❌ You’re not part of this trade.", ephemeral=True)
            return
        await interact.response.edit_message(content="❌ Trade declined.", view=None)

    view.add_item(discord.ui.Button(label="Accept Trade", style=discord.ButtonStyle.success, custom_id="accept"))
    view.add_item(discord.ui.Button(label="Decline Trade", style=discord.ButtonStyle.danger, custom_id="decline"))

    view.children[0].callback = accept_callback
    view.children[1].callback = decline_callback

    await interaction.response.send_message(f"🔄 {member.mention}, do you accept this trade? {interaction.user.display_name} offers **{your_item_obj['name']}** for your **{target_item_obj['name']}**.", view=view)

# ------------------ Fighting System ------------------

class FightView(discord.ui.View):
    def __init__(self, player1, player2, hp, dmg, ctx):
        super().__init__(timeout=300)  # 5 min timeout
        self.player1 = player1
        self.player2 = player2
        self.hp = hp
        self.dmg = dmg
        self.turn = player1
        self.ctx = ctx

    async def end_fight(self, winner, loser):
        await self.ctx.edit_original_response(content=f"🏆 {winner.display_name} wins the fight! They take one random item from {loser.display_name}.", view=None)

    @discord.ui.button(label="Attack", style=discord.ButtonStyle.primary)
    async def attack(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.turn:
            await interaction.response.send_message("❌ Not your turn!", ephemeral=True)
            return
        opponent = self.player2 if self.turn == self.player1 else self.player1
        damage = random.randint(*self.dmg[self.turn.id])
        self.hp[opponent.id] -= damage
        if self.hp[opponent.id] <= 0:
            await self.end_fight(self.turn, opponent)
            self.stop()
            return
        self.turn = opponent
        await interaction.response.edit_message(content=f"⚔️ {interaction.user.display_name} dealt {damage} damage!\n\n{self.player1.display_name}: {self.hp[self.player1.id]} HP\n{self.player2.display_name}: {self.hp[self.player2.id]} HP", view=self)

    @discord.ui.button(label="Defend", style=discord.ButtonStyle.secondary)
    async def defend(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.turn:
            await interaction.response.send_message("❌ Not your turn!", ephemeral=True)
            return
        opponent = self.player2 if self.turn == self.player1 else self.player1
        if random.random() < 0.5:  # 50% chance
            await interaction.response.edit_message(content=f"🛡️ {interaction.user.display_name} defended successfully and took no damage!", view=self)
        else:
            damage = random.randint(*self.dmg[opponent.id]) // 2
            self.hp[interaction.user.id] -= damage
            if self.hp[interaction.user.id] <= 0:
                await self.end_fight(opponent, interaction.user)
                self.stop()
                return
            await interaction.response.edit_message(content=f"🛡️ {interaction.user.display_name} tried to defend but still took {damage} damage!", view=self)
        self.turn = opponent

@bot.tree.command(name="fight", description="Challenge another player to a fight.")
@app_commands.describe(member="The user you want to fight")
async def fight(interaction: discord.Interaction, member: discord.Member):
    if member.id == interaction.user.id:
        await interaction.response.send_message("❌ You can’t fight yourself.")
        return

    user = get_user(interaction.user.id)
    target = get_user(member.id)
    if not user["inventory"] or not target["inventory"]:
        await interaction.response.send_message("❌ Both players must have at least one item.")
        return

    # Take first item from each inventory for fight stats
    u_item = user["inventory"][0]
    t_item = target["inventory"][0]
    u_stats = data["rarities"][u_item["rarity"]]
    t_stats = data["rarities"][t_item["rarity"]]

    # Prepare fight stats
    hp = {interaction.user.id: u_stats["hp"], member.id: t_stats["hp"]}
    dmg = {interaction.user.id: u_stats["damage"], member.id: t_stats["damage"]}

    view = discord.ui.View(timeout=60)

    async def accept_callback(interact: discord.Interaction):
        if interact.user != member:
            await interact.response.send_message("❌ You’re not part of this fight.", ephemeral=True)
            return
        fight_view = FightView(interaction.user, member, hp, dmg, interact)
        await interact.response.edit_message(content=f"⚔️ Fight started!\n{interaction.user.display_name}: {hp[interaction.user.id]} HP\n{member.display_name}: {hp[member.id]} HP", view=fight_view)

    async def decline_callback(interact: discord.Interaction):
        if interact.user != member:
            await interact.response.send_message("❌ You’re not part of this fight.", ephemeral=True)
            return
        await interact.response.edit_message(content="❌ Fight declined.", view=None)

    view.add_item(discord.ui.Button(label="Accept Fight", style=discord.ButtonStyle.success))
    view.add_item(discord.ui.Button(label="Decline Fight", style=discord.ButtonStyle.danger))
    view.children[0].callback = accept_callback
    view.children[1].callback = decline_callback

    await interaction.response.send_message(f"⚔️ {member.mention}, do you accept this fight challenge from {interaction.user.display_name}?", view=view)

# ------------------ Admin Commands ------------------

@bot.tree.command(name="add_currency", description="(Admin) Add coins to a user.")
@app_commands.describe(member="The user to give coins to", amount="How many coins to give")
async def add_currency(interaction: discord.Interaction, member: discord.Member, amount: int):
    if not is_admin(interaction):
        await interaction.response.send_message("❌ You do not have permission.", ephemeral=True)
        return
    user = get_user(member.id)
    user["coins"] += amount
    save_data(data)
    await interaction.response.send_message(f"✅ Added {amount} coins to {member.display_name}.")

# (add_item, remove_item, add_rarity, remove_rarity, bundle commands would go here in the same format)

# ------------------ Help ------------------

@bot.tree.command(name="help", description="Show all available commands.")
async def help_command(interaction: discord.Interaction):
    commands_list = """
**User Commands**
/daily – Claim 10 coins every 15h
/bank – Check coins
/buy – Spend 10 coins to get an item
/inventory – View inventory
/sell <item> – Sell an item
/sell_all <rarity> – Sell all items of a rarity
/trade <user> <your_item> <their_item> – Trade items
/fight <user> – Challenge another player

**Admin Commands**
/add_currency <user> <amount> – Add coins
/add_item <rarity> <item> – Add item to rarity
/remove_item <rarity> <item> – Remove item
/add_rarity <name> <chance> – Add rarity
/remove_rarity <name> – Remove rarity
/create_bundle – Create bundle
/edit_bundle – Edit bundle
/delete_bundle – Delete bundle
"""
    await interaction.response.send_message(commands_list, ephemeral=True)

# ------------------ Run Bot ------------------

bot.run(MTQxMDMyOTQ4Njc2Mjk3MTE1Ng.GfhIIV.DgYwLhLArbGAIyHwlSjW2q2UEq3TAuT3NA4qak)
